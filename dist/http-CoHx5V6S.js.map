{"version":3,"file":"http-CoHx5V6S.js","names":["url: string","options: FullRequestOptions","requestFlowPersistentData: Record<string, unknown>","statusCode: number","headers: Map<string, string | string[]>","body: Buffer","request: HttpRequest","response: HttpResponse","listener: ((event: any) => Promise<void> | void)[]","userAgent: string"],"sources":["../src/http/HttpRequest.ts","../src/http/HttpResponse.ts","../src/http/client/HttpClientEvents.ts","../src/http/client/HttpClient.ts","../src/http/client/UndiciHttpClient.ts","../src/http/util/UserAgentGenerator.ts","../src/http/index.ts"],"sourcesContent":["import type { FullRequestOptions } from './client/HttpClient.ts';\n\nexport default class HttpRequest {\n  constructor(\n    public url: string,\n    public options: FullRequestOptions,\n    public readonly requestFlowPersistentData: Record<string, unknown> = {},\n  ) {\n  }\n}\n","import type * as Undici from 'undici';\nimport type { IncomingHttpHeaders } from 'undici/types/header.js';\n\nexport default class HttpResponse {\n  /**\n   * They keys of the `headers`-Map are expected to always be in lowercase.\n   */\n  constructor(\n    public readonly statusCode: number,\n    public readonly headers: Map<string, string | string[]>,\n    public readonly body: Buffer,\n  ) {\n  }\n\n  get ok(): boolean {\n    return this.statusCode >= 200 && this.statusCode < 300;\n  }\n\n  getHeader(key: string): string | null;\n  getHeader(key: 'Set-Cookie'): string[] | null;\n  getHeader(key: string): string | string[] | null {\n    return this.headers.get(key.toLowerCase()) ?? null;\n  }\n\n  parseBodyAsText(): string {\n    return this.body.toString('utf8');\n  }\n\n  parseBodyAsJson<T>(): T {\n    return JSON.parse(this.parseBodyAsText());\n  }\n\n  static async fromUndiciResponse(response: Undici.Dispatcher.ResponseData): Promise<HttpResponse> {\n    return new HttpResponse(\n      response.statusCode,\n      this.parseHeaders(response.headers),\n      Buffer.from(await response.body.arrayBuffer()),\n    );\n  }\n\n  private static parseHeaders(headers: IncomingHttpHeaders): Map<string, string | string[]> {\n    const parsedHeaders = new Map<string, string | string[]>();\n    for (const [key, value] of Object.entries(headers)) {\n      if (value != null) {\n        parsedHeaders.set(key.toLowerCase(), value);\n      }\n    }\n    return parsedHeaders;\n  }\n}\n","import type HttpRequest from '../HttpRequest.ts';\nimport type HttpResponse from '../HttpResponse.ts';\n\nexport type HttpClientEventType = 'preRequest' | 'postRequest';\n\nexport class PreRequestEvent {\n  constructor(\n    public readonly request: HttpRequest,\n  ) {\n  }\n}\n\nexport class PostRequestEvent {\n  constructor(\n    public readonly request: HttpRequest,\n    public readonly response: HttpResponse,\n  ) {\n  }\n}\n","import type HttpRequest from '../HttpRequest.ts';\nimport HttpResponse from '../HttpResponse.ts';\nimport { HttpClientEventType, PostRequestEvent, PreRequestEvent } from './HttpClientEvents.ts';\n\nexport type BaseRequestOptions = {\n  headers?: { [key: string]: string };\n}\n\nexport interface GetRequestOptions extends BaseRequestOptions {\n  query?: { [key: string]: string | number | boolean };\n}\n\nexport interface PostRequestOptions extends BaseRequestOptions {\n  body?: Buffer | string;\n}\n\nexport interface FullRequestOptions extends BaseRequestOptions, GetRequestOptions, PostRequestOptions {\n  method: 'GET' | 'POST';\n}\n\nexport default abstract class HttpClient {\n  protected readonly eventListener: {\n    pre: ((event: PreRequestEvent) => Promise<void> | void)[],\n    post: ((event: PostRequestEvent) => Promise<void> | void)[],\n  } = { pre: [], post: [] };\n\n  public abstract get(url: string, options?: GetRequestOptions): Promise<HttpResponse>;\n\n  public abstract post(url: string, options?: PostRequestOptions): Promise<HttpResponse>;\n\n  protected abstract request(request: HttpRequest): Promise<HttpResponse>;\n\n  protected async emitEvent(event: PreRequestEvent | PostRequestEvent): Promise<void> {\n    let listener: ((event: any) => Promise<void> | void)[];\n    if (event instanceof PreRequestEvent) {\n      listener = this.eventListener.pre;\n    } else {\n      listener = this.eventListener.post;\n    }\n\n    for (const listenerFunction of listener) {\n      await listenerFunction(event);\n    }\n  }\n\n  public addEventListener(event: 'preRequest', callback: (event: PreRequestEvent) => void | Promise<void>): void;\n  public addEventListener(event: 'postRequest', callback: (event: PostRequestEvent) => void | Promise<void>): void;\n  public addEventListener(event: HttpClientEventType, callback: ((event: PreRequestEvent) => void | Promise<void>) | ((event: PostRequestEvent) => void | Promise<void>)): void {\n    if (event === 'preRequest') {\n      this.eventListener.pre.push(callback as any);\n      return;\n    } else if (event === 'postRequest') {\n      this.eventListener.post.push(callback as any);\n      return;\n    }\n\n    throw new Error(`Unknown event type: ${event}`);\n  }\n}\n","import * as Undici from 'undici';\nimport HttpRequest from '../HttpRequest.ts';\nimport HttpResponse from '../HttpResponse.ts';\nimport HttpClient, { type FullRequestOptions, type GetRequestOptions, type PostRequestOptions } from './HttpClient.ts';\nimport { PostRequestEvent, PreRequestEvent } from './HttpClientEvents.ts';\n\nexport default class UndiciHttpClient extends HttpClient {\n  private agent?: Undici.Dispatcher;\n\n  constructor(\n    protected userAgent: string,\n  ) {\n    super();\n  }\n\n  get(url: string, options?: GetRequestOptions): Promise<HttpResponse> {\n    return this.request(new HttpRequest(url, {\n      ...options,\n      method: 'GET',\n    }));\n  }\n\n  post(url: string, options?: PostRequestOptions): Promise<HttpResponse> {\n    return this.request(new HttpRequest(url, {\n      ...options,\n      method: 'POST',\n    }));\n  }\n\n  protected async request(request: HttpRequest): Promise<HttpResponse> {\n    await this.emitEvent(new PreRequestEvent(request));\n\n    const dispatcher = this.selectDispatcher(request);\n    const response = await Undici.request(request.url, {\n      dispatcher,\n\n      method: request.options.method,\n      query: request.options.query,\n      body: request.options.body,\n      headers: this.mergeWithDefaultHeaders(request.options.headers),\n    });\n\n    const httpResponse = await HttpResponse.fromUndiciResponse(response);\n    await this.emitEvent(new PostRequestEvent(request, httpResponse));\n    return httpResponse;\n  }\n\n  protected selectDispatcher(_request: HttpRequest): Undici.Dispatcher {\n    if (this.agent === undefined) {\n      this.agent = new Undici.Agent(this.getDefaultAgentOptions());\n    }\n    return this.agent;\n  }\n\n  protected getDefaultAgentOptions(): Undici.Agent.Options {\n    return {\n      maxResponseSize: 20 * 1024 * 1024 /* 20 MiB */,\n      bodyTimeout: 12_000,\n      headersTimeout: 12_000,\n    };\n  }\n\n  private mergeWithDefaultHeaders(headers?: FullRequestOptions['headers']): Map<string, string | string[]> {\n    const mergedHeaders = new Map<string, string | string[]>();\n    mergedHeaders.set('user-agent', this.userAgent);\n    mergedHeaders.set('accept', 'application/json');\n\n    if (headers != null) {\n      for (const [key, value] of Object.entries(headers)) {\n        mergedHeaders.set(key.toLowerCase(), value);\n      }\n    }\n    return mergedHeaders;\n  }\n}\n","import Os from 'node:os';\n\nexport default class UserAgentGenerator {\n  static generate(appName: string, appVersion: string, includeSystemInfo: boolean = true, infoOrAppUrl?: string): string {\n    let userAgent = `${appName}/${appVersion}`;\n\n    if (includeSystemInfo) {\n      userAgent += ` (${Os.type()}; ${process.arch}; ${process.platform})`;\n    }\n\n    if (infoOrAppUrl != null) {\n      userAgent += ` (+${infoOrAppUrl})`;\n    }\n\n    return userAgent;\n  }\n}\n","//noinspection JSUnusedGlobalSymbols\n\nexport { default as HttpRequest } from './HttpRequest.ts';\nexport { default as HttpResponse } from './HttpResponse.ts';\n\nexport * as HttpClientEvents from './client/HttpClientEvents.ts';\nexport {\n  default as HttpClient,\n  type GetRequestOptions,\n  type PostRequestOptions,\n  type FullRequestOptions,\n} from './client/HttpClient.ts';\nexport { default as UndiciHttpClient } from './client/UndiciHttpClient.ts';\n\nexport { default as UserAgentGenerator } from './util/UserAgentGenerator.ts';\n"],"mappings":"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"}