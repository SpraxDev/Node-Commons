{"version":3,"file":"index.js","names":["HOSTNAME_PATTERN: RegExp","EMAIL_PATTERN: RegExp"],"sources":["../src/strings/StringUtils.ts","../src/strings/StringValidators.ts"],"sourcesContent":["export default class StringUtils {\n  /**\n   * Return true if the given string only contains number characters.\n   */\n  public static isNumeric(str: string): boolean {\n    return /^\\d+$/.test(str);\n  }\n\n  /**\n   * Arguments are formatted as `{key}` inside a string and may not be nested.\n   * The arguments may be provided as an array which means that `key` is equivalent to the element's index.\n   * If the arguments are provided as key-value pairs, `key` is equivalent to the key.\n   *\n   * If you provide an array of arguments,\n   * you do not need to worry about escaping non-numeric keys in the string (e.g. `{name}`).\n   *\n   *\n   * Arguments may be escaped using double braces:\n   * `{{key}}` will be replaced with `{key}` not touching `key` inside the braces.\n   *\n   *\n   * By default, found keys which cannot be mapped to an argument will be skipped:\n   * `('{0}{1}', ['a'])` will return `'a{1}'`.\n   * This behaviour can be changed by setting the `fallbackValue`.\n   *\n   * In the example above a `fallbackValue` of `'.'` would return `'a.'` instead.\n   *\n   *\n   * **Example usage**\n   *\n   * ```\n   * formatStr('{0} ({0}) is {{0}} **{2}** using {1}!', ['Sprax', 'TypeScript']);\n   * // Sprax (Sprax) is {0} **{2}** using TypeScript!\n   *\n   * formatStr('{name} ({name}) is {{name}} **{2}** using {uses}!', {name: 'Sprax', uses: 'TypeScript'});\n   * // Sprax (Sprax) is {name} **{2}** using TypeScript!\n   * ```\n   *\n   * @param str The string to apply the replacing\n   * @param args An array or key-value pairs of arguments to replace\n   * @param fallbackValue The string to use if an index is not present. `undefined` means to skip it\n   */\n  public static format(str: string, args: string[] | { [variable: string]: string }, fallbackValue?: string): string {\n    const regex = Array.isArray(args) ? /{{|}}|{(\\d+)}/g : /{{|}}|{(.+?)}/g;\n\n    return str.replace(regex, (curlyBracket, key: string) => {\n      if (curlyBracket == '{{') {\n        return '{';\n      }\n\n      if (curlyBracket == '}}') {\n        return '}';\n      }\n\n      return (args as any)[key] ?? fallbackValue ?? `{${key}}`;\n    });\n  }\n}\n","import Net from 'node:net';\nimport StringUtils from './StringUtils.ts';\n\nexport const HOSTNAME_PATTERN: RegExp = /(?=^.{4,253}$)(^((?!-)[a-z0-9-]{0,62}[a-z0-9]\\.)+[a-z]{2,63}\\.?$)/i;\nexport const EMAIL_PATTERN: RegExp = /^[a-z0-9.!#$%&'*+/=\"?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i;\n\nexport type HttpCheckResult = { valid: boolean, issue?: 'hostname' | 'port' | 'protocol' };\n\nexport default class StringValidators {\n  public static looksLikeHttpUrl(url: string): HttpCheckResult {\n    // Protocol\n    if (!/^https?:\\/\\/.*$/i.test(url)) {\n      return {valid: false, issue: 'protocol'};\n    }\n\n    let lowerHost = url.toLowerCase().substring(url.indexOf('/') + 2);\n\n    // Path\n    if (lowerHost.indexOf('/') != -1) {\n      lowerHost = lowerHost.substring(0, lowerHost.indexOf('/'));\n    }\n\n    // Port\n    if (lowerHost.lastIndexOf(':') != -1) {\n      const portStr = lowerHost.substring(lowerHost.lastIndexOf(':') + 1);\n      const port = parseInt(portStr, 10);\n      lowerHost = lowerHost.substring(0, lowerHost.lastIndexOf(':'));\n\n      if (!StringUtils.isNumeric(portStr) || port <= 0 || port > 65535 /* unsigned int2 */) {\n        return {valid: false, issue: 'port'};\n      }\n    }\n\n    if (Net.isIPv4(lowerHost) || Net.isIPv6(lowerHost) || lowerHost == 'localhost') {\n      return {valid: true};\n    }\n\n    const valid = HOSTNAME_PATTERN.test(lowerHost);\n\n    if (valid) {\n      return {valid};\n    }\n\n    return {valid, issue: 'hostname'};\n  }\n\n  public static looksLikeValidEmail(email: string): boolean {\n    return EMAIL_PATTERN.test(email);\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAqB,cAArB,MAAiC;;;;CAI/B,OAAc,UAAU,KAAsB;AAC5C,SAAO,QAAQ,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqC1B,OAAc,OAAO,KAAa,MAAiD,eAAgC;EACjH,MAAM,QAAQ,MAAM,QAAQ,KAAK,GAAG,mBAAmB;AAEvD,SAAO,IAAI,QAAQ,QAAQ,cAAc,QAAgB;AACvD,OAAI,gBAAgB,MAAM;AACxB,WAAO;;AAGT,OAAI,gBAAgB,MAAM;AACxB,WAAO;;AAGT,UAAQ,KAAa,QAAQ,iBAAiB,IAAI,IAAI;IACtD;;;;;;;;;;;ACpDN,MAAaA,mBAA2B;AACxC,MAAaC,gBAAwB;AAIrC,IAAqB,mBAArB,MAAsC;CACpC,OAAc,iBAAiB,KAA8B;AAE3D,MAAI,CAAC,mBAAmB,KAAK,IAAI,EAAE;AACjC,UAAO;IAAC,OAAO;IAAO,OAAO;IAAW;;EAG1C,IAAI,YAAY,IAAI,aAAa,CAAC,UAAU,IAAI,QAAQ,IAAI,GAAG,EAAE;AAGjE,MAAI,UAAU,QAAQ,IAAI,IAAI,CAAC,GAAG;AAChC,eAAY,UAAU,UAAU,GAAG,UAAU,QAAQ,IAAI,CAAC;;AAI5D,MAAI,UAAU,YAAY,IAAI,IAAI,CAAC,GAAG;GACpC,MAAM,UAAU,UAAU,UAAU,UAAU,YAAY,IAAI,GAAG,EAAE;GACnE,MAAM,OAAO,SAAS,SAAS,GAAG;AAClC,eAAY,UAAU,UAAU,GAAG,UAAU,YAAY,IAAI,CAAC;AAE9D,OAAI,CAAC,YAAY,UAAU,QAAQ,IAAI,QAAQ,KAAK,OAAO,OAA2B;AACpF,WAAO;KAAC,OAAO;KAAO,OAAO;KAAO;;;AAIxC,MAAI,IAAI,OAAO,UAAU,IAAI,IAAI,OAAO,UAAU,IAAI,aAAa,aAAa;AAC9E,UAAO,EAAC,OAAO,MAAK;;EAGtB,MAAM,QAAQ,iBAAiB,KAAK,UAAU;AAE9C,MAAI,OAAO;AACT,UAAO,EAAC,OAAM;;AAGhB,SAAO;GAAC;GAAO,OAAO;GAAW;;CAGnC,OAAc,oBAAoB,OAAwB;AACxD,SAAO,cAAc,KAAK,MAAM"}